# 石子游戏中，爱丽丝和鲍勃轮流进行自己的回合，爱丽丝先开始 。

# 有 n 块石子排成一排。每个玩家的回合中，可以从行中 移除 最左边的石头或最右边的石头，并获得与该行中剩余石头值之 和 相等的得分。当没有石头可移除时，得分较高者获胜。

# 鲍勃发现他总是输掉游戏（可怜的鲍勃，他总是输），所以他决定尽力 减小得分的差值 。爱丽丝的目标是最大限度地 扩大得分的差值 。

# 给你一个整数数组 stones ，其中 stones[i] 表示 从左边开始 的第 i 个石头的值，如果爱丽丝和鲍勃都 发挥出最佳水平 ，请返回他们 得分的差值 。

# 来源：力扣（LeetCode）
# 链接：https://leetcode-cn.com/problems/stone-game-vii
# 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

from typing import List
from itertools import accumulate
class Solution:
    def stoneGameVII(self, stones: List[int]) -> int:
        n = len(stones)
        pre_sum = list(accumulate([0] + stones))
        range_sum = [[0 for _ in range(n)] for _ in range(n)]
        dp = [[0 for _ in range(n)] for _ in range(n)]
        for i in range(n):
            for j in range(i, n):
                range_sum[i][j] = pre_sum[j + 1] - pre_sum[i]

        for i in range(n - 1, -1, -1):
            for j in range(i + 1, n):
                if j == i + 1:
                    dp[i][j] = max(stones[i], stones[j])
                else:
                    dp[i][j] = max(range_sum[i + 1][j] - dp[i + 1][j], range_sum[i][j - 1] - dp[i][j - 1])
        return dp[0][n - 1]
        
                    
     
# stones = [7,90,5,1,100,10,10,2]      
# stones = [5,3,1,4,2]           
# stones = [792,195,697,271,743,51,836,322,135,550,399,182,988,25,395,254,480,931,513,772,798,102,110,915,794,330,597,220,789,462]
stones = [272,916,968,90,997,296,639,551,829,290,266,55,423,501,182,473,500,748,851,959,977,247,445,622,654,668,68,825,585,138,977,240,34,60,716,800,522,95,805,501,966,855,596,696,292,215,670,699,70,442,881,321,120,516,62,597,51,194,136,485,628,342,35,149,938,486,785,189,411,287,585,294,87,453,352,514,145,128,706,181,59,183,720,397,796,915,970,216,129,347,996,653,401,893,139,705,821,791,998,426,661,835,294,576,716,72,964,864,387,817,759,505,283,792,239,253,793,63,380,623,247,593,609,855,744,283,425,333,744,203,341,217,411,537,132,826,882,972,932,713,660,306,190,611,515,701,115,438,438,841,158,26,539,752,228,719,276,819,845,881,136,908,797,658,753,183,612,452,606,729,651,148,421,774,115,946,425,876,731,56,206,654,201,536,649,400,425,789,304,452,362,932,782,512,548,614,828,609,969,54,978,486,413,470,458,665,312,288,764,670,84,185,607,793,31,75,545,842,733,629,800,194,4,224,679,865,236,58,133,127,496,975,422,619,467,810,840,782,29,102,646,320,988,137,874,87,135,124,688,785,32,579,841,197,943,147,957,285,442,989,131,221,775,575,104,778,479,387,344,953,380,659,829,688,997,889,168,997,611,979,735,130,599,358,874,386,929,587,397,999,160,102,910,874,512,571,342,762,941,210,158,218,739,972,354,574,404,762,306,864,901,949,386,198,458,677,426,713,474,202,485,327,908,554,920,500,850,21,869,889,542,243,127,734,367,815,801,621,623,871,109,321,160,313,171,952,266,305,190,124,237,585,415,450,20,504,27,108,906,349,134,278,669,125,743,502,75,298,938,304,964,61,100,361,268,77,716,614,748,947,67,811,898,28,48,582,890,651,451,891,921,824,60,801,450,203,896,162,74,748,523,268,271,591,756,715,525,391,62,323,464,999,11,539,525,902,852,290,743,37,15,892,577,173,663,632,269,571,730,316,855,710,61,885,974,940,253,20,802,369,80,491,357,854,966,605,313,192,38,784,129,630,283,873,965,957,112,583,781,946,897,915,660,614,92,967,774,895,274,361,339,877,522,281,542,957,622,363,569,701,756,716,678,327,615,899,791,958,740,409,692,104,1,257,464,116,91,196,329,677,258,460,284,270,915,196,641,620,777,739,16,715,123,981,601,61,620,987,369,829,290,92,836,215,133,23,815,551,998,913,14,23,426,941,546,985,523,491,154,241,833,223,758,346,706,160,591,906,545,26,579,888,267,840,935,299,830,207,518,826,101,743,260,811,650,806,498,627,594,96,865,749,392,858,899,732,48,968,672,109,699,529,151,526,616,992,838,779,165,995,348,988,527,917,250,863,177,427,535,942,54,505,336,240,221,295,292,714,925,321,755,276,365,979,134,923,651,399,304,98,68,446,620,719,697,933,631,163,764,137,52,913,764,650,434,867,580,648,405,450,715,588,187,832,658,85,550,734,773,523,939,411,651,219,245,36,460,24,154,182,392,295,614,307,196,52,740,727,953,939,33,821,354,741,368,256,747,190,722,964,730,183,652,406,451,426,13,309,640,663,184,2,832,346,804,493,490,170,633,284,221,378,951,911,160,311,562,536,239,244,591,842,56,204,973,211,942,769,201,941,125,104,85,142,916,176,797,344,427,41,440,342,330,14,708,444,458,221,163,371,417,11,323,78,437,273,802,509,331,852,655,937,703,429,247,68,974,610,143,105,574,482,370,60,165,862,7,249,576,958,765,928,694,739,218,806,99,625,500,329,327,36,980,680,442,210,587,455,384,824,533,271,512,360,46,932,304,108,85,819,626,160,624,367,374,48,990,7,204,760,790,762,586,335,56,67,922,796,340,431,969,11,435,230,345,770,415,328,652,884,528,446,567,673,458,898,906,281,559,106,181,19,501,69,189,664,67,209,991,411,273,574,595,674,318,790,492,750,894,648,994,126,464,908,626,19,832,631,575,892,587,865,766,499,168,632,944,498,914,368,773,73,165,188,606,842,636,712,725,442,839,278,17,416,85,164,432,900,46,321,16,589,4,78,775,319,356,716,40,792,52,964,590,930,557,598,272,387,345,851,109,376,368,813,549,576,427]
s = Solution()
print(s.stoneGameVII(stones))